'''

2019

'''

import numpy as NP
import numpy.random as R
from scipy import integrate
import scipy.stats as S
import scipy.special as SP
import matplotlib.pylab as MPL

def trifunc(x, left, mode, right):
    if   ((x >= left) & (x <= mode)):
        y = 2*(x-left)/((right-left)*(mode-left))
    elif ((x > mode) & (x <= right)):
        y = 2*(right-x)/((right-left)*(right-mode))
    else:
        y = 0.  
    return(y)

# a - plot triangular distribution

left  = 1.
mode  = 2.
right = 5.

maxx = 6.
dx = .01

xarr = NP.arange(0,maxx,dx)
farr = xarr*0

idx = 0
for x in xarr:
    farr[idx] = trifunc(x, left, mode, right)
    idx = idx + 1

MPL.figure
MPL.plot(xarr,farr)
MPL.title('triangular distribution')
MPL.xlabel('x')
MPL.ylabel('p(x)')
MPL.savefig("triangular.pdf",format="pdf")
MPL.show()

########################################

# b - now do 10000 samples from the built-in triangular distribution

N = 1000
data = R.triangular(left,mode,right,N)

MPL.figure

MPL.hist(data,bins=20)

MPL.title('histogram of triangular distribution random samples (numpy)')
MPL.xlabel('x')
MPL.ylabel('p(x)')
MPL.savefig("trihist.pdf",format="pdf")
MPL.show()

########################################

# c - create your own random sampler using rejection sampling

N = 1000

data = NP.zeros((N))

MPL.figure()
MPL.hold(True)

MPL.plot(xarr,farr)

maxtri = 2/(right-left)
for i in NP.arange(N):
    reject = True
    while reject:
        rndx = left + (right-left)*R.rand()
        rndy = 1.1*maxtri*R.rand()
        if rndy < trifunc(rndx, left, mode, right):
            reject = False
            MPL.plot(rndx,rndy,'bo')
        else:
            reject = True
            MPL.plot(rndx,rndy,'ro')
    data[i] = rndx

MPL.hold(False)
MPL.savefig("trirejectshow.pdf",format="pdf")
MPL.show()

MPL.figure

MPL.hist(data,bins=20)

MPL.title('histogram of triangular distribution random samples (reject)')
MPL.xlabel('x')
MPL.ylabel('p(x)')
MPL.savefig("trihist2.pdf",format="pdf")
MPL.show()

########################################

# d - MCMC

N = 1000
burnin = 100

data = NP.zeros((N))

# sigma for proposal distribution
sig = .1

# starting point for chain
x0 = mode

# current position
xt = x0

# thin
thin = 50

# burn-in
for i in NP.arange(burnin):
    # generate proposal
    xp = sig*R.randn() + xt

    # calculate acceptance ratio
    accept = trifunc(xp, left, mode, right) / trifunc(xt, left, mode, right)

    # accept or reject
    rnd = R.rand()
    if rnd <= accept:
        xt = xp
    else:
        xt = xt

# rejection sampling with thinning
for i in NP.arange(N):

    # real sample

    # generate proposal
    xp = sig*R.randn() + xt

    # calculate acceptance ratio
    accept = trifunc(xp, left, mode, right) / trifunc(xt, left, mode, right)

    # accept or reject
    rnd = R.rand()
    if rnd <= accept:
        xt = xp
    else:
        xt = xt

    # keep if past burn-in
    data[i] = xt

    # thin samples
    for j in NP.arange(thin):
        # generate proposal
        xp = sig*R.randn() + xt

        # calculate acceptance ratio
        accept = trifunc(xp, left, mode, right) / trifunc(xt, left, mode, right)

        # accept or reject
        rnd = R.rand()
        if rnd <= accept:
            xt = xp
        else:
            xt = xt

MPL.figure

MPL.hist(data,bins=20)

MPL.title('histogram of triangular distribution random samples (Metropolis)')
MPL.xlabel('x')
MPL.ylabel('p(x)')
MPL.savefig("trihistMCMC.pdf",format="pdf")
MPL.show()
